/**
 * K6 Load Test Template - Category Page
 *
 * Generated by Promo Load Analyzer
 * Target: {{ url }}
 * Environment: {{ environment }}
 */

import http from 'k6/http';
import { check, sleep } from 'k6';
import { Trend, Counter } from 'k6/metrics';

// Custom metrics
const pageLoadTime = new Trend('page_load_time');
const productCount = new Trend('products_per_page');
const paginationClicks = new Counter('pagination_clicks');

export const options = {
    // Load test stages: ramp-up, sustain, ramp-down
    stages: [
        {% for stage in stages -%}
        { duration: '{{ stage.duration }}', target: {{ stage.target }} },
        {% endfor -%}
    ],

    // Safety thresholds - abort test if exceeded
    thresholds: {
        {% if thresholds.http_req_failed -%}
        'http_req_failed': [
            {% for rule in thresholds.http_req_failed -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
        {% if thresholds.http_req_duration -%}
        'http_req_duration': [
            {% for rule in thresholds.http_req_duration -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
        {% if thresholds.checks -%}
        'checks': [
            {% for rule in thresholds.checks -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
    },

    // Test metadata
    tags: {
        test_type: 'category_page',
        environment: '{{ environment }}',
    },
};

/**
 * Main test scenario
 * Simulates user browsing category page
 */
export default function() {
    const baseUrl = '{{ url }}';

    // 1. Load category page (first page)
    const startTime = Date.now();
    const pageResponse = http.get(baseUrl, {
        tags: { name: 'category_page_load' },
    });
    const pageLoadDuration = Date.now() - startTime;
    pageLoadTime.add(pageLoadDuration);

    // Check category page load success
    const pageOk = check(pageResponse, {
        'category loads successfully': (r) => r.status === 200,
        'category loads fast': (r) => r.timings.duration < 3000,
        'no server error': (r) => r.status < 500,
        'has products': (r) => r.body.includes('product') || r.body.includes('item'),
        'has price': (r) => r.body.includes('price') || r.body.includes('€'),
    });

    if (!pageOk) {
        console.warn(`⚠️ Category check failed - VU ${__VU} iteration ${__ITER}`);
    }

    // Count products on page (rough estimate)
    const productMatches = pageResponse.body.match(/data-id-product=["']\d+["']/g);
    if (productMatches) {
        productCount.add(productMatches.length);
    }

    // Simulate user browsing products
    sleep(2 + Math.random() * 3);

    // 2. Optionally load pagination (simulate 30% of users going to page 2)
    if (Math.random() < 0.3) {
        // Try to find pagination link
        const page2Match = pageResponse.body.match(/href=["']([^"']*[?&]page=2[^"']*)["']/);
        if (page2Match && page2Match[1]) {
            let page2Url = page2Match[1];

            // Make absolute URL if relative
            if (!page2Url.startsWith('http')) {
                const urlParts = baseUrl.split('/');
                const domain = urlParts.slice(0, 3).join('/');
                page2Url = page2Url.startsWith('/') ? domain + page2Url : domain + '/' + page2Url;
            }

            // Decode HTML entities
            page2Url = page2Url.replace(/&amp;/g, '&');

            const page2Response = http.get(page2Url, {
                tags: { name: 'category_pagination' },
            });

            check(page2Response, {
                'page 2 loads': (r) => r.status === 200,
                'page 2 has products': (r) => r.body.includes('product') || r.body.includes('item'),
            });

            paginationClicks.add(1);

            // User views page 2
            sleep(2 + Math.random() * 2);
        }
    }

    // Think time before next iteration
    sleep(1 + Math.random() * 2);
}

/**
 * Setup function - runs once before test starts
 */
export function setup() {
    console.log('🚀 Starting load test for category page: {{ url }}');
    console.log('📊 Configuration:');
    console.log('   - Environment: {{ environment }}');
    console.log('   - Stages: {{ stages|length }} stages');
    console.log('');
    console.log('🛡️ Safety thresholds active - test will abort if exceeded');
    console.log('');

    // Warm-up request to verify target is reachable
    const warmupResponse = http.get('{{ url }}');
    if (warmupResponse.status !== 200) {
        console.error(`❌ Warm-up request failed: ${warmupResponse.status}`);
        console.error('   Target may be unreachable. Aborting test.');
        return null;  // Abort test
    }

    console.log('✅ Warm-up successful - target is reachable');
    return { startTime: new Date().toISOString() };
}

/**
 * Teardown function - runs once after test completes
 */
export function teardown(data) {
    if (data && data.startTime) {
        console.log('');
        console.log('🏁 Load test completed');
        console.log(`   Started: ${data.startTime}`);
        console.log(`   Ended: ${new Date().toISOString()}`);
    }
    console.log('');
    console.log('📊 Check k6 output above for detailed metrics and threshold status');
}
