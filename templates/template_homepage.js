/**
 * K6 Load Test Template - Homepage
 *
 * Generated by Promo Load Analyzer
 * Target: {{ url }}
 * Environment: {{ environment }}
 */

import http from 'k6/http';
import { check, sleep } from 'k6';
import { Trend } from 'k6/metrics';

// Custom metrics
const pageLoadTime = new Trend('page_load_time');
const imageLoadTime = new Trend('image_load_time');

export const options = {
    // Load test stages: ramp-up, sustain, ramp-down
    stages: [
        {% for stage in stages -%}
        { duration: '{{ stage.duration }}', target: {{ stage.target }} },
        {% endfor -%}
    ],

    // Safety thresholds - abort test if exceeded
    thresholds: {
        {% if thresholds.http_req_failed -%}
        'http_req_failed': [
            {% for rule in thresholds.http_req_failed -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
        {% if thresholds.http_req_duration -%}
        'http_req_duration': [
            {% for rule in thresholds.http_req_duration -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
        {% if thresholds.checks -%}
        'checks': [
            {% for rule in thresholds.checks -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
    },

    // Test metadata
    tags: {
        test_type: 'homepage',
        environment: '{{ environment }}',
    },
};

/**
 * Main test scenario
 * Simulates user browsing homepage
 */
export default function() {
    const baseUrl = '{{ url }}';

    // 1. Load homepage
    const startTime = Date.now();
    const pageResponse = http.get(baseUrl, {
        tags: { name: 'homepage_load' },
    });
    const pageLoadDuration = Date.now() - startTime;
    pageLoadTime.add(pageLoadDuration);

    // Check homepage load success
    const pageOk = check(pageResponse, {
        'homepage loads successfully': (r) => r.status === 200,
        'homepage loads fast': (r) => r.timings.duration < 3000,
        'no server error': (r) => r.status < 500,
        'has navigation': (r) => r.body.includes('nav') || r.body.includes('menu'),
        'has content': (r) => r.body.length > 10000,  // Homepage should have substantial content
    });

    if (!pageOk) {
        console.warn(`⚠️ Homepage check failed - VU ${__VU} iteration ${__ITER}`);
    }

    // Simulate user viewing homepage content
    sleep(1 + Math.random() * 2);

    // 2. Load a sample static resource (simulate image/CSS loading)
    // Extract first image from page (simple regex)
    const imageMatch = pageResponse.body.match(/src=["']([^"']+\.(jpg|jpeg|png|webp|gif))[^"']*/i);
    if (imageMatch && imageMatch[1]) {
        let imageUrl = imageMatch[1];

        // Make absolute URL if relative
        if (!imageUrl.startsWith('http')) {
            const urlParts = baseUrl.split('/');
            const domain = urlParts.slice(0, 3).join('/');
            imageUrl = imageUrl.startsWith('/') ? domain + imageUrl : domain + '/' + imageUrl;
        }

        const imgStartTime = Date.now();
        const imageResponse = http.get(imageUrl, {
            tags: { name: 'homepage_image' },
        });
        const imgLoadDuration = Date.now() - imgStartTime;
        imageLoadTime.add(imgLoadDuration);

        check(imageResponse, {
            'image loads': (r) => r.status === 200,
        });
    }

    // Think time - simulate user browsing
    sleep(2 + Math.random() * 3);
}

/**
 * Setup function - runs once before test starts
 */
export function setup() {
    console.log('🚀 Starting load test for homepage: {{ url }}');
    console.log('📊 Configuration:');
    console.log('   - Environment: {{ environment }}');
    console.log('   - Stages: {{ stages|length }} stages');
    console.log('');
    console.log('🛡️ Safety thresholds active - test will abort if exceeded');
    console.log('');

    // Warm-up request to verify target is reachable
    const warmupResponse = http.get('{{ url }}');
    if (warmupResponse.status !== 200) {
        console.error(`❌ Warm-up request failed: ${warmupResponse.status}`);
        console.error('   Target may be unreachable. Aborting test.');
        return null;  // Abort test
    }

    console.log('✅ Warm-up successful - target is reachable');
    return { startTime: new Date().toISOString() };
}

/**
 * Teardown function - runs once after test completes
 */
export function teardown(data) {
    if (data && data.startTime) {
        console.log('');
        console.log('🏁 Load test completed');
        console.log(`   Started: ${data.startTime}`);
        console.log(`   Ended: ${new Date().toISOString()}`);
    }
    console.log('');
    console.log('📊 Check k6 output above for detailed metrics and threshold status');
}
