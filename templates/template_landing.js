/**
 * K6 Load Test Template - Landing Page
 *
 * Generated by Promo Load Analyzer
 * Target: {{ url }}
 * Environment: {{ environment }}
 */

import http from 'k6/http';
import { check, sleep } from 'k6';
import { Trend, Counter } from 'k6/metrics';

// Custom metrics
const pageLoadTime = new Trend('page_load_time');
const ctaClicks = new Counter('cta_clicks');

export const options = {
    // Load test stages: ramp-up, sustain, ramp-down
    stages: [
        {% for stage in stages -%}
        { duration: '{{ stage.duration }}', target: {{ stage.target }} },
        {% endfor -%}
    ],

    // Safety thresholds - abort test if exceeded
    thresholds: {
        {% if thresholds.http_req_failed -%}
        'http_req_failed': [
            {% for rule in thresholds.http_req_failed -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
        {% if thresholds.http_req_duration -%}
        'http_req_duration': [
            {% for rule in thresholds.http_req_duration -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
        {% if thresholds.checks -%}
        'checks': [
            {% for rule in thresholds.checks -%}
            {
                threshold: '{{ rule.threshold }}',
                abortOnFail: {{ rule.abort_on_fail|lower }},
                {% if rule.delay_abort_eval -%}
                delayAbortEval: '{{ rule.delay_abort_eval }}'
                {% endif -%}
            },
            {% endfor -%}
        ],
        {% endif -%}
    },

    // Test metadata
    tags: {
        test_type: 'landing_page',
        environment: '{{ environment }}',
    },
};

/**
 * Main test scenario
 * Simulates user visiting landing page and potentially clicking CTA
 */
export default function() {
    const baseUrl = '{{ url }}';

    // 1. Load landing page
    const startTime = Date.now();
    const pageResponse = http.get(baseUrl, {
        tags: { name: 'landing_page_load' },
    });
    const pageLoadDuration = Date.now() - startTime;
    pageLoadTime.add(pageLoadDuration);

    // Check landing page load success
    const pageOk = check(pageResponse, {
        'landing page loads successfully': (r) => r.status === 200,
        'landing page loads fast': (r) => r.timings.duration < 3000,
        'no server error': (r) => r.status < 500,
        'has promo content': (r) => {
            const body = r.body.toLowerCase();
            return body.includes('promo') ||
                   body.includes('offre') ||
                   body.includes('reduction') ||
                   body.includes('discount') ||
                   body.includes('black') ||
                   body.includes('solde');
        },
        'has CTA': (r) => {
            const body = r.body.toLowerCase();
            return body.includes('btn') ||
                   body.includes('button') ||
                   body.includes('acheter') ||
                   body.includes('buy') ||
                   body.includes('shop');
        },
    });

    if (!pageOk) {
        console.warn(`⚠️ Landing page check failed - VU ${__VU} iteration ${__ITER}`);
    }

    // Simulate user reading landing page content
    sleep(2 + Math.random() * 3);

    // 2. Simulate CTA click (40% of users)
    if (Math.random() < 0.4) {
        // Try to find CTA link (product link, category link, or shop button)
        const ctaPatterns = [
            /href=["']([^"']*\/\d+-[^"']+\.html)[^"']*/i,  // Product link
            /href=["']([^"']*\/[^"']*category[^"']*)[^"']*/i,  // Category link
            /href=["']([^"']*\/boutique[^"']*)[^"']*/i,  // Shop link
        ];

        let ctaUrl = null;
        for (const pattern of ctaPatterns) {
            const match = pageResponse.body.match(pattern);
            if (match && match[1]) {
                ctaUrl = match[1];
                break;
            }
        }

        if (ctaUrl) {
            // Make absolute URL if relative
            if (!ctaUrl.startsWith('http')) {
                const urlParts = baseUrl.split('/');
                const domain = urlParts.slice(0, 3).join('/');
                ctaUrl = ctaUrl.startsWith('/') ? domain + ctaUrl : domain + '/' + ctaUrl;
            }

            // Decode HTML entities
            ctaUrl = ctaUrl.replace(/&amp;/g, '&');

            const ctaResponse = http.get(ctaUrl, {
                tags: { name: 'landing_cta_click' },
            });

            check(ctaResponse, {
                'CTA destination loads': (r) => r.status === 200,
            });

            ctaClicks.add(1);

            // User views CTA destination
            sleep(1 + Math.random() * 2);
        }
    }

    // Think time before next iteration
    sleep(1 + Math.random() * 2);
}

/**
 * Setup function - runs once before test starts
 */
export function setup() {
    console.log('🚀 Starting load test for landing page: {{ url }}');
    console.log('📊 Configuration:');
    console.log('   - Environment: {{ environment }}');
    console.log('   - Stages: {{ stages|length }} stages');
    console.log('');
    console.log('🛡️ Safety thresholds active - test will abort if exceeded');
    console.log('');

    // Warm-up request to verify target is reachable
    const warmupResponse = http.get('{{ url }}');
    if (warmupResponse.status !== 200) {
        console.error(`❌ Warm-up request failed: ${warmupResponse.status}`);
        console.error('   Target may be unreachable. Aborting test.');
        return null;  // Abort test
    }

    console.log('✅ Warm-up successful - target is reachable');
    return { startTime: new Date().toISOString() };
}

/**
 * Teardown function - runs once after test completes
 */
export function teardown(data) {
    if (data && data.startTime) {
        console.log('');
        console.log('🏁 Load test completed');
        console.log(`   Started: ${data.startTime}`);
        console.log(`   Ended: ${new Date().toISOString()}`);
    }
    console.log('');
    console.log('📊 Check k6 output above for detailed metrics and threshold status');
}
